[["index.html", "Introduction course R Preface", " Introduction course R Team TV/TB 2023-09-05 Preface In the past years you have learned to apply statistical analyses, using SPSS. Maybe you have noticed, e.g. during your internships, that other statistical software programs are used as well. One of the most widely used statistical software is R. It is open source, free to use, and supported by many active users. But … it is based on writing code, and that needs some practice. We expect that you understand why you need to use statistics in applied research, and are familiar with t-tests, linear regressions and anova’s (including post-hoc tests). "],["setup.html", "Setup", " Setup This manual is setup for self study, but we have supporting lessons with a short introduction of the week’s content and time for questions. "],["start-with-rstudio.html", "Hoofdstuk 1 Start with RStudio", " Hoofdstuk 1 Start with RStudio RStudio is free software and available for Windows, macOS and Linux. R is a computer language, developed in New Zealand, in 1995, maintained by the R Core Team. In make life easier an an Integrated Development Environment (IDE) is developed: RStudio. With the combination of R and RStudio you can easily handle data, make analyses and create figures. "],["installing.html", "1.1 Installing", " 1.1 Installing You need to install both R and RStudio. You can find the links here vinden. Opdracht 1.1 Install the software Click on the link above Follow the first step to install R. Click on install for the first time. Always choose yes and OK. Go back to the first website and follow step 2. Choose the most recent free stand alone version of RStudio. Open RStudio "],["console.html", "1.2 Console", " 1.2 Console When you have opened RStudio, you see at the left bottom the console. This is the place where you give the computer R commands. The term originates from the time that computers were the size of a (modern) fridge, and giving commands via a separate keyboard and screen (often incorporated in a desk): the console. Nowadays everything is integrated in a laptop, and the commands are often hidden behind icons. Excpet when you start working with R …. At the bottem you see &gt;. That is the prompt, right after you can type commands. Most of you are not familiar with communicating with computers via language, so it is important to practice it a bit. Opdracht 1.2 Calculation excercise Give R some calculation commands, e.g. 4*2. Don’t put a = for or after the command. End your command with enter. try also square roots (sqrt()), the power (^), pi (pi()). "],["objects.html", "1.3 Objects", " 1.3 Objects Often you want to use the outcome of a calculation in the next step. You can put the outcome in the computer memory by giving it a name: outcome &lt;- 4*2 of 4*2 -&gt; outcome The arrow (&lt;-) means that the name (the object) where it points to, get the value which is at the other end of the arrow. Most often the left pointing arrow is used (&lt;-), which you can write instantly with surrounding spaces with the short-cut alt-. Objects always need to start with a letter and should not contain any spaces. By just writing the object name in the console you can call the value of that object. And good to know that R distuinguished normal and capital letters. Tip: use object names that make sense, you will recognize the purpose the day after. Opdracht 1.3 Objects make objects for your name, place of residence, age and favorite number. NB:you need to start and end a text string with \" to make clear it is a valua and not an object name. For numbers, don’t use \"! call one-by-one the different objects let R sum up your age and favorite number (Nb: use the object names!) Try also sum up name and place of residence. You will get an error. Read it carefully and try to understand the meaning of the error "],["Vectors.html", "1.4 Vectors", " 1.4 Vectors Objects can be combined in a vector, with the function c()(c stands for combine). p1 &lt;- c(naam, woonplaats, leeftijd) The vector is an object on its own, containing multiple values from the other objects. In this case we have named this vector p1, but you can choose a different name if you like. Vectors are widely used in R, especially in statistical functions. You can call the values seperately by using an index number after the object name: e.g. p1[2]. Within the square brackets [] you give the item number in the vector. The first item has index number 1. You also can give multiple index numbers, using the function c(): e.g. p1[c(1,3)], or using the minus sign to exclude one or more: e.g. p1[-2]. Opdracht 1.4 Index numbers make a vectore with the range 1 to 10 (easily made in R with the code 1:10). Give it an object name. Practice with calling different numbers from the range using index numbers. Call the complete vector, except the last value. Find a clever way to call at once index numbers 3-7. If vectors only contain numbers, you can make calculations with the complete vector. Opdracht 1.5 Vectors Create a vector with the rang 1-4 Multiple the vector by 2. What happens? Try also different calculations. What happens if you multiply the vector by itself? "],["functies.html", "1.5 Functies", " 1.5 Functies Functions are the foundation of R (and every other computer language). They are in essence small factories changing input to output. The output can be a number, but also a grpah or even the creation of a file. For illustration purposes the function mean(): mean(v) Hiermee geef je R de opdracht het gemiddelde te berekenen van de getallen in vector v. Opdracht 1.6 Functions calculate the mean of the vector from last excercise. Apply also the next functions: length() sd() min() max() range() summary() Find out what these functions do. Tip: you can use ?functionname to open a help page. The input in a function is called an argument. Many functions can have multiple arguments. Some of them are required, otherwise you get an error. Other arguments are not required, and have standard values. You only need to add them, if you want to have another values for those arguments. In the next lesson, about t-tests, you will find both types of arguments. NB: all arguments have names. It is a good custom to name them in your functions (e.g. mean(x=p1)), otherwise R will assume the order of arguments based on how the function is programmed. You find the argument named with the helper pages using ?. "],["packages.html", "1.6 Packages", " 1.6 Packages R has a great number of base functions available, but people have developed many more functions. These functions are available in so called packages. Packages are bundles of functions, often developed for specific purposes (e.g. making nice graphs). These packages are tested and available from a save location (CRAN-website). You can install them with the function install.packages(). As argument you give the package name. NB: it is text, so you need \". You only need to install it once on your computer. It is like buying a book (but then for free!) and store it in your bookshelf. For this course we use many functions out of a collection of packages called tidyverser. We also use the package readxl to import Excel files. Opdracht 1.7 Install packages Install the packages tidyverse and readxl. NB: installing tidyverse takes time, wait until you see the cursor again. Placing a book in the bookshelf, does not mean you can read it. In order to use a function from a package you need to activate with the function library(). The reason is that some packages contain functions with the same name. It is saver to only activate packages you need. "],["r-project.html", "1.7 R-project", " 1.7 R-project The power of RStudio is the way you can organise data analysis in projects. By linking a project environment to a map on your computer, you can store the history of your data analysis for that specific map and RStudio use that map as the default to search and store files (replacing the old R-code setwd() to define the working directory). You can start a project in an existing folder, or make a new map (RStudio uses the old name directory for a map). For this course, I already created a map in Teams which you need to synchronise with your computer in order to work with. You can open the project from within RStudio: File -&gt; Open project, or next time by double clicking on the R-project file in your map. Then it will automatically open RStudio in your project mode. "],["script.html", "1.8 Script", " 1.8 Script Nice that you can communicate with the computer via de console, but how do you remember what you did last week? The solution is to write your codes in a text document and execute the codes from there. Such a text document is called a script. If you save your script in your project map, you only need to open it to see what you did last time. You can open a new script by either clicking on the plus sign in the menu, or use the short-cut ctr+shift+n. Opdracht 1.8 Setup script type in the first row the next code library(readxl). in th next row type `temp &lt;- read_excel(“data/lichaamstemperatuur.xlsx”) Save the script as Bodytemp.R in je R-folder. With the short-cut Ctrl+Enter you can run the row where your cursor is. It automatically goes to the next row, so you can by repeatly using the short-cut run all codes in your script. You can also select all or part of the code and run it at once with the same short-cut. Opdracht 1.9 Run code execute the codes from your script row by row Observe what it is doing To make your codes more clear, you can add comments. Text starting with # will be recognized as comments, and not executed. It is a good habit to add comments in your scripts, so other people can understand what you were doing. Opdracht 1.10 Comments Include above both rows of code in the scrip an extra row describing the code below as a comment "],["data-frame.html", "1.9 Data frame", " 1.9 Data frame By running both rows of code, if correct you see on the right top side the object bodytemp. The object is the data from the Excel file, and is called a data frame. Opdracht 1.11 Data frame add the next code to your script: str(bodetemp), and run that code. Str stands for structure and with this function you can see the intern structure of the objec You get the following output: ## tibble [130 × 3] (S3: tbl_df/tbl/data.frame) ## $ tc : num [1:130] 35.7 35.9 36.1 36.1 36.2 36.2 36.2 36.2 36.3 36.3 ... ## $ gen: chr [1:130] &quot;man&quot; &quot;man&quot; &quot;man&quot; &quot;man&quot; ... ## $ hr : num [1:130] 70 71 74 80 73 75 82 64 69 70 ... The top row shows the type of object. In this case it has three labels: tbl_df, tbl en data.frame. Sounds complicated, but all three say that it is a ** data frame**. Every column is in fact a vector. They are listed after the $. The type of data in each vector is given (num = numeric, chr = character (= text)). Between the brackets ([]) you can find how long the vectors are. There are several ways to look at your data frame: Via the object name (bodytemp) With the function View() In the right top window, by clicking on the object name Opdracht 1.12 View your Data frame Try the three ways to view your data frame Often, you only need certain vectors (columns) from your data frame. You can call these vectors seperately by using the sign **\\(** after the object name of the data frame. In case of the bodytemp data set: `bodytemp\\)tc` will show you the vector tc. Opdracht 1.13 call vector from data frame Write a code that will calculate the average of the vector tc. Opdracht 1.14 Own data set Use, or make an Excel file of a own data set (e.g. from your internship) Start a new script and write code that will import that data View your data in RStudio "],["summary-part-1.html", "1.10 Summary part 1", " 1.10 Summary part 1 You now have the basic skills of working in RStudio. You can use R commands to make calculations You can work with RSTudio projects and scripts You know what data frames and vectors are, and make calculations with them You can import data from Excel files In the next chapter you use these skills to apply statistics. "],["figuren-via-ggplot.html", "Hoofdstuk 2 Figuren via ggplot", " Hoofdstuk 2 Figuren via ggplot The most common way to produce figures in R nowadays is using the package ggplot2. It is part of the Tidyverse packages. It is extremely versatile. In this course we spend one lesson on ggplot to learn the basics. We use the online manual. Opdracht 2.1 Manual Read the first steps in the online manual "],["first-steps.html", "2.1 First steps", " 2.1 First steps GGplot is part of tidyverse, which includes all kind of tools to work with data, with some of them quite usefully when making figures. Therefore it is, in general, useful to make this tools available in your script. Tidyverse * Add to your script a line of code that will activate tidyverse and run the code. NB: it is good custom to place all the library-function in the first rows of your script. "],["code-for-figures.html", "2.2 Code for figures", " 2.2 Code for figures On first sight, codes for ggplot-figures look unnecessarily complicated, but it is in fact quite structured. The code works in a few steps: First step is to define the figure, by giving the variables for the x and y-axis. ggplot(data = df, aes(x = var1, y = var2)) + NB: replace the names var1, var2 and df for the names you use for your data frame and column names. The + is placed at the end of the row to indicate that the output of this row will be used in the next line of code. In this way, you can build-up the code for the figure in a clear and structured way. The second step is defining the type of figure, e.g.: geom_histogram() NB: for some figures you only need an x-variable, like for histogram or boxplot. Opdracht 2.2 Histogram Add code in your script to make a histogram of body temperature "],["types-of-figures.html", "2.3 Types of figures", " 2.3 Types of figures With ggplot there are many different types of figures possible. Have a look in the manual at the geoms chapter. Opdracht 2.3 geom-functions Find out which functions you need for a boxplot and for a scatterplot "],["aes.html", "2.4 aes", " 2.4 aes The functions ggplot()has aes as argument (input for the function). Aes stand for aesthetics. No idea why this word is chosen, since the argument is about which data is presented on which axis. You probably noticed that aes is followed by (), which indicates that aes is a function on its own. In aes() you can add additional arguments, e.g. to color or fill different groups (using fill=vargroup or color=vargroup, vargroup the name of column that defines the group). Opdracht 2.4 aes adjust your script in a way that the different genders (column gen) have a different fill. "],["position.html", "2.5 position", " 2.5 position As you probably noticed, is the result of a histogram with two groups that both histograms are stacked. But it would give more insight if they are placed on the same level. You can change that with the argument position in the geom-function: position = \"identity\". The value identity means that both groups are positioned independently of each other on the y-axis. For other possibilities see manual. Opdracht 2.5 position Adjust the code, so that both histograms are not stacked anymore. "],["transparancy.html", "2.6 transparancy", " 2.6 transparancy Now both histograms are at the same height can we compare the numbers more easily. Drawback is that in some places one group is hidden behind the other and you don’t see how much lower the other group is. The solution is to make the bars slightly transparant. You can do that with the argument (also in the geom-function) alpha = 0.4. The value 0.4 is oftern a good mix between brightness and transparency. Opdracht 2.6 alpha Add the argument alpha to your code and adjust the value to your preference. "],["densityplots.html", "2.7 Densityplots", " 2.7 Densityplots A nice alternative for an histogram is a densityplot, via the function geom_density. Opdracht 2.7 density Copy the code for the histogram in your script. Replace the word histogram with density and run the code. Quite simple, isn’t it? "],["scatter-plots.html", "2.8 Scatter plots", " 2.8 Scatter plots A common graph is the scatter plot. Both x- and y-axis contain numerical (and often continuous) data. In the aes() you need column names for both x and y. With geom_point you display the data as points in the graph. As in the histogram, you can give groups different colours, in the case of points, choose the argument color instead of fill in aes(). Opdracht 2.8 Scatterplot Add in your script code for a scatterplot of tc on the x-axis verus hr (heart rate) Give the different genders a different colour. "],["bar-chart.html", "2.9 Bar chart", " 2.9 Bar chart A common way to present data like in the body temperature data set, is to use bar charts. Bar charts give the average (and ofter spread in the form of error bars) of the data, which is nearly always divided in different groups (one bar for each group). The most convinient ggplot-code for this kind of plots is stat-summary(). In the function you can define the type of graph. For a bar chart, use geom = \"bar\". It automatically calculates the mean and the standard error for each group. Opdracht 2.9 Bar charrt make in the same script new code to show the means of body temperature of men and women in separate bars. Tip: use gen as variable on the x-axis run the code Often you want to include error bars in your bar chart. With the ggplot it is quite easy: just add another layer with stat_summary(), but now with geom = \"errorbar\". For aesthetic reasons make the error bar smaller than the bar by adding the argument width = 0.5. Opdracht 2.10 Error bar Add an error bar to your plot "],["meerdere-groepen-bij-staafdiagrammen.html", "2.10 meerdere groepen bij staafdiagrammen", " 2.10 meerdere groepen bij staafdiagrammen Also by bar charts you can show different groups. In this case use the argument fill as you want to fill up the bars. The default setting for position in stat_summary() is “identity:, but with bar charts it is normal to have the groups besides each other, that is called dodge. You can control how close the groups are by: position = position_dodge(0.9). A value of 0.9 is often optimal. NB: position_dodge() also works with other types of graphs like box plots and violin plots. "],["trend-line.html", "2.11 Trend line", " 2.11 Trend line When you have a scatter plot, you are often interested in the relation between the variables on the x- and y-axis. You probably know the function for a trend line in Excel, a similar function is available in ggplot. Just ad the line geom_smooth(method = \"lm\"). The argument lm means that a linear fit is made. Opdracht 2.11 trend line Go back to the script for the scatter plot Add a trend line If done right, you see now a straight line through the point cloud. Around the line is a grey area: the 95% condifence of the line (with 95% confidence the real linear relation is with that area). If you want to remove that area, just add the argument se = FALSE. "],["many-more-possibilities.html", "2.12 Many more possibilities", " 2.12 Many more possibilities There is a variety of possibilies to adjust your figures in ggplot. In addition other people have developed packages that make other figures (including GIS-maps) with ggplot-functionality. Because a clear figure is an excellent way to communicate research results, it is clever to invest some time learning more about ggplot. "],["t-tests.html", "Hoofdstuk 3 T-tests", " Hoofdstuk 3 T-tests There are three types of t-tests: * One sample t-test * Paired t-test * Independent t-test All three tests can be applied with one function t.test(), thanks to the possibility of multiple arguments in one function. In the next section we need the data set bodytemp, which you already imported. "],["one-sample-t-test.html", "3.1 One-sample t-test", " 3.1 One-sample t-test The simplest version of a t-test is when you want to test if the average of a single population is different from a theoretical value. So, you collect a random sample from a population, e.g. the body temperature of 130 students. The next step is to define your hypotheses: H0: Temperature is not different from 37 degrees Celsius. H1: Temperature is different from 37 degrees Celsius. The general idea is that human’s body temperature is on average 37 degrees Celsius, hence this H0. The symbol for the population average is , pronounced as mu. Third step is testing the hypothesis with the function t.test(x, mu = ..). For a one-sample t-test (as we need now), the first argument should be a vector, containing the sample to be tested. The other argument needed is mu, which is from the H0. NB: mu is not second in row in the list of possible arguments, therefore you need to name it in your code followed by = and the value. The output gives a lot of information. Most important, for hypothesis testing, is the p-value. P-values less than the threshold (often 0.05) means that you reject the H0 and accept the H1. But also usefull is the 95% confidence interval. It shows the lower and upper limit where, with 95% confidence, of the real average. Opdracht 3.1 Vectors and data frames refresh your memory about vectors and data frames. How can you call a vector from a data frame? Opdracht 3.2 One sample t-test Test with a one-sample t-test if the average body temperature deviates from 37 degrees celsius (add the code to your script. Write down your conclusions as a comment in the script. 3.1.1 One sided and two sided tests With a t-test you can test one and two sided. The default setting in the function t.test() is two sided. But there are situations you want to test if the average value is lower than a certain value. Your H1 is then: &lt; 37. By giving the argument alternative the value less, you test one sided. In the situation you want to test &gt; 37, you need to use the value greater. Opdracht 3.3 Testing one sided copy your t.test code to a new row and adjust it so it will test if &lt; 37. Compare the outcome 3.1.2 Climate change In the last years the role of humans in climate change is becoming more clear. That is ilustrated in below figure, showing the week average in the Bilt in the period before 1950 and from 2000 (data: KNMI). Now it is your turn to test, for a specific week if the temperatures, from 2000 onward, are on average higher than before 1950. You all have a data set in your project map for a specific week number. Check the average pre 1950 temperature for the same week number in the table below. Opdracht 3.4 Climate change Open a new script, save it under a logical name Write down the H0 and the H1 as comments in the script write down codes for importing the data set and the one sample t-test. Write down your conclusions as comment in the script. Average temperature per week in period 1901-1950: weeknumber pre1950 1 2.83 2 2.27 3 1.95 4 1.20 5 2.13 6 2.16 7 2.36 8 2.82 9 3.47 10 3.71 11 4.57 12 5.90 13 6.59 14 7.02 15 8.06 16 8.37 17 8.95 18 10.35 19 11.18 20 12.10 21 13.63 22 14.14 23 14.48 24 14.36 25 15.07 26 15.19 27 15.99 28 16.69 29 16.58 30 16.48 31 16.48 32 16.35 33 15.98 34 15.68 35 15.48 36 14.83 37 13.82 38 13.23 39 12.28 40 11.24 41 10.44 42 9.55 43 8.02 44 7.16 45 6.19 46 5.00 47 4.39 48 4.15 49 3.44 50 2.98 51 2.18 52 2.46 53 2.29 "],["independent-t-test.html", "3.2 Independent t-test", " 3.2 Independent t-test Up to now we have tested one group against a theoretic average. But often you want to compare two groups. In that case you have an independent (or explanatory) variable, which states to what group the observation belongs. In the function t.test() you can use as first argument a statistical formula instead of a single vector. Such a formula always has the form dependent ~ independent. The dependent (or response) variable is the variable you are interested in and which variation you want to explain. In the data set bodytemp we have the column gen giving the gender of the students. Independent t-test * Test if the average body temperature of male and female students significant differ. Add the code to the bodytemp script * Write down the conclusions as comments in your script 3.2.1 Fertilization In your data map you find a Excel file called bemesting.xlsx. It contains data of an experiments where plant length is measured on plants that were or were not fertilized. Om te oefenen hebben jullie een dataset gekregen van een experiment waarbij plantlengte gemeten werd van planten wel of niet bemest zijn. Aan jullie de vraag om statistisch te toetsen of er een effect van bemesting is. Denk na over de hypotheses en bedenk of het logisch is om een- of tweezijdig te toetsen. Opdracht 3.5 Fertilization Make a new script, give it a logical name Write code that import the bemesting.xlsx file Test if fertilization has an effect on plant length. NB: consider if it makes sense to test one-sided Write down the conclusions as a comment in the script "],["paired-t-test.html", "3.3 Paired t-test", " 3.3 Paired t-test With the independent t-test, you have two groups that are sampled independently from each other, where both groups have a different treatment. But there are situations that you apply two treatments on the same research objects. For example, students do a math test before and after drinking a few glasses of beer. Of course you expect that the math capacity will decrease after drinking beer. The hypotheses are: H0: Score before drinking is equal to score after drinking beer. H1: Score before drinking is higher then score after drinking beer. Under the H0 you expect that the scores are on average equal before and after drinking. With other words: the difference between before and after is on average 0. How can you test that with a t-test? Calculate for each student the difference of both tests Apply a one-sample t-test for the difference with But you can apply both steps at once with a paired t-test, so you don’t need to first calculate the difference. With paired data it is important that it is clear which observations are paired. A good habit is to store paired data on the same row in your Excel spreadsheet: student before after 1 7 5 2 4 4 3 6 5 4 9 7 5 5 5 This setup is called a wide table. The consequence is that the response variable is not in one column, and therefor you cannot use the standard notation of a statistical formula. Luckily the function t.test() also can handle the input of two vectors: t.test(x,y). To make clear to R that we want to apply a paired t-test, we need to set the argument paired to TRUE: t.test(x,y, paired = TRUE). NB: TRUE needs to be written in capital letters. For lacy people: you also just use the capital letter T. Opdracht 3.6 beer make a new script, and write a code to import bier.xlsx (from your data map) import the data, and test if there is an negative effect of beer on the math score (write down your code in the script). Write down your conclusions as a comment in the script. 3.3.1 Macho blackbirds Research has indicated that higher testosterone levels have a negative effect on resistance against diseases. This hypothesis is tested in red-winged blackbirds. In thirteen male birds antibody levels were measured before and after placing a testosterone producing implant. You find the data in blackbirds.xlsx in your data map. Opdracht 3.7 Macho blackbirds Test if the implant has a positive effect on antibody production Write down your conclusions in the script "],["lineair-models-1-linear-regressie.html", "Hoofdstuk 4 Lineair models 1: Linear Regressie", " Hoofdstuk 4 Lineair models 1: Linear Regressie R has a function to fit the best linear model in a dataset. Most statistical tests (linear regression, one-way ANOVA, two-way ANOVA) are based on this linear model. The most intuitive linear model is a straight line through a cloud of data points. That is what you are doing with a linear regression. The function to fit the linear model is lm(). Like the t.test it’s first argument is statistical formula: response ~ explanatory. In all cases the response vector needs to be numerical vector, otherwise you will get an error. In the case of a linear regression, the explanatory vector also needs to be an numerical vector. In you data map you’ll find a file called ijklijn.xlsx. It is (not the best) calibration line for a colorimetric measurements: van zetmeel: Tabel 4.1: Calibration line absorptie concentratie 0.000 0.000 0.030 0.125 0.060 0.250 0.176 0.500 0.249 0.750 0.285 1.000 To avoid complications with further functions (like predict()), we use an extra argument data to refer to the data frame object and we only use the column names (without object$) in the statistical model. Opdracht 4.1 Calibration line Make script that runs: importing the data set fit the best model: NB: store the output as an object using &lt;- look at the output and try to understand the different numbers. also run summary() with as argument the lm-object. Did you find the R2? For more details about the output of the summary() function: see here "],["hypothesis-testing.html", "4.1 Hypothesis testing", " 4.1 Hypothesis testing Although it is not quite common to use regression analysis to test a hypothesis in this case: is there a relation between absorption and concentration), it is possible. With the function anova() you apply an analysis of variance. In short, it will test if the explanatory power of the variation in your data set by the statistical model is so good, that you can rule out the possibility that this is due to random effects. The function anova() needs as argument the output of the function lm() (that’s why you needed to store the output van lm as an object). The function anova() creates an ANOVA table with for the explanory variable the p-value (here called Pr(&gt;F)). Opdracht 4.2 Hypothesis testing Apply the function anova() on the linear model of ijklijn Is there a significant relation between both vectors? "],["predictions.html", "4.2 Predictions", " 4.2 Predictions The most common use of regressions is to make predictions. In the case of a calibration line, you want to use it to estimate the concentration in unknown samples based on the absorption. You probably have done such measurements in the past by first estimate the regression line and use the parameters of that line to calculate the estimated concentrations. Luckily in R there is the function predict(). The negative side is that the function is a bit picky about the arguments. The first argument should be the output of the lm-function. So far so good. The next argument is the value(s) of the explanatory variable you want to make predictions for. Unluckily this argument should be in the format of a data frame ánd the column name should be exactly the same as in the statistical model. It is quite easy to make a data frame: df &lt;- data.frame(absorptie = 1.5) Of course you can use a different object name than df. Instead of one number you can make a longer vector, e.g. c(1.5, 2.3, 5.4). An interesting option is to calculate the confidence interval. Just add the argument interval = \"confidence\"). "],["practice.html", "4.3 practice", " 4.3 practice In an experiment we want to test the assumption that the weight gain of sow’s are and indication of the birth weight van piglets. For 10 sow’s data is collected. You can find the data in zeugen.xlsx in your data map. Opdracht 4.3 Piglets Apply a linear regression. Check what the p-value and the R2 are. Predict the expected piglet weight, and confidence interval, in the situation a sow will gain 15 kg "],["linear-models-2-anovas-and-posthoc-tests.html", "Hoofdstuk 5 Linear models 2: ANOVA’s and Posthoc Tests", " Hoofdstuk 5 Linear models 2: ANOVA’s and Posthoc Tests If the explanatory variable is categorical data, you can still fit a linear model. In that case you are fitting average values for each group. It’s called a One-way ANOVA. In contrast to an independent t-test, you can compare more than two groups. The hypothesis you test with an ANOVA is if there are any differences between the groups. If you are interested in which group differ from each other, you have to apply an extra test, called a posthoc test. "],["anova-in-r.html", "5.1 ANOVA in R", " 5.1 ANOVA in R Like linear regression, you use the lm() function to fit a the statistical model, and the function anova() to test the hypothesis. NB: make sure that R interprets the explanatory variable as categorical. The easiest is that you use letters in the group category names. In your data map you find the file koeien.xlsx. It is about milking speed (in kg/min) for three different cattle breeds. Milk production * Write a script that imports the data set * Add code that a) fit the linear model and b) run an ANOVA * Check the output and write down, as comment, your conclusions "],["posthoc-tests.html", "5.2 Posthoc tests", " 5.2 Posthoc tests If you find a significant difference between the groups, you can test which groups are different with a posthoc test. Over time, many different posthoc tests have been developed, with sometimes subtle differences in assumptions and optimal use. To keep life simple, we stick with three posthoc tests for three different situations: If groups sizes are similar, choose Tukey HSD If group sizes are not similar, choose Bonferroni If you only want to compare the groups with a control group (instead of all possible pairwise comparisons), choose Dunnet’s Like the enormous variety of posthoc test, are there also many ways to apply a posthoc test in R. The package emmeans has the function emmeans() that works for almost all possible statistical situations, therefor it is high recommendend to use this function. The function emmeans() requires as first argument the output of a statistical model (in our case the output of lm()). Both Tukey HSD and Bonferroni make a pairwise comparison for each combination of groups. In the function emmeans() you can define that with the argument specs = pairwise ~ explvar, where explvar is the name of the explanatory variable you want to test. The default posthoc test is Tukey HSD. If you want a Bonferroni instead, add the argument adjust = “bonf”. Posthoc test * Test, with the right test, which cattle breeds differ in milking speed. * Look at the output, and make your conclusions. Write them down as comment in your script. The result of emmeans() is build up in two sections: The first section (emmeans) show the average effect of each category, with confidence interval. For applied science is maybe more important than the question which groups are significant different! The name for these average effects are the Estimated Marginal Means. The second section (contrasts) show the hypothesis test of each pairwise comparison, the actual posthoc test. Look at the p-value in the last column. 5.2.1 Dunnet’s For Dunnet’s Posthoc test you need to use for spects not pairwise, but trt.vs.ctrl (treatment versus control): specs = trt.vs.ctrl ~ explvar The function automatically takes the first category (lowest in alphabet) as control. With the argument ref=i you can define which category is the control, with for i the index number of the control category (place all categories in alphabetic orde, a use the position of the control. In case the control is the last in the row, you can also use: specs = tr.vs.ctrlk ~ explvar. "],["practice-1.html", "5.3 Practice", " 5.3 Practice The next excercise is based on research, published in the American Society of Animal Science. The spore element silicium (Si) has a positive influence on the bone quality. In the reserarch they were focused on the question if Si supplements in lactating mares influences the blood si levels in the foals. They tested three doses (A, B and C), with 5 replicates, in total 15 mares: dosis Si-gehalte (\\(\\mu\\)g/l) A 129; 137; 129; 134; 139 B 133; 148; 142; 139; 134 C 138; 148; 140; 145; 148 Opdracht 5.1 Silicium Make an Excel file wit the data Make an R script that imports the data, create an appropriate graph, apply an One-way ANOVA and in applicable the right Posthoc test. write down you conclusions as comment in the script. "],["two-way-anovas.html", "5.4 Two-way ANOVA’s", " 5.4 Two-way ANOVA’s Up to now we have only focussed on one explanatory variable. But often your experiment is more complex. E.g. you are testing the growth effect of a new fertilizer on tomato’s, and are you testing it on three different tomato varieties. Now you have two factors that could influence the growth of the plants: fertilizer and variety. Luckily we can add both them easily in a linear model: growth ~ fertilizer + variety. Opdracht 5.2 Two-way anova Write code that import the dataset plantengroei.xlsx from your data map. Make an approriate graph. Test if fertilizer and/or plant variaty has an effect on growth rate. Write down your conclusions as a comment. "],["main-and-interaction-effects.html", "5.5 Main and interaction effects", " 5.5 Main and interaction effects In the previous example we have used a + to add an extra explanatory effects. That plus means that the next variable has an effect, independend from the previous one. In this case you are testing the main effects of each variable. If you also want to include possible interaction effects you need to use a *. "],["posthoc-tests-for-two-way-anovas.html", "5.6 Posthoc tests for two-way ANOVAs", " 5.6 Posthoc tests for two-way ANOVAs The function emmeans() can be used for two-way ANOVAs as well. You can either test for one of the explanatory variables or all combinations of both. In that case you write specs = pairwise ~ var1:var2, with for var1 and var2 both explanatory variables. "],["practice-2.html", "5.7 Practice", " 5.7 Practice R contains data sets to practice. One of them is about the effect of vitamin C on tooth growth in Cavia porcellus. With the function data(\"ToothGrowth) you create an object of that dataset. The vitamin was applied in three doses (0.5, 1 and 2 mg/day) (dose) in two different types of supplement (orange juice or vitamin C extrat) (supp). The length of the odontoplasts (growth cells in the teeth) were measured. Opdracht 5.3 Tooth growth make an object of the data set ToothGrowth check the structure of the data set As you can see, the column dose has numerical values. If you are going to put that column as explanatory variable in an lm() function, the function will treat it as covariate (meaning as a linear regression). The solution is to make R clear that it is a categorical data. The function for that is factor(): ToothGrowth$dose &lt;- factor(ToothGrowth$dose) (#exr:cavia_vervolg) Cavia 2 apply above function make an clear figure with ggplot Test both for dose and supp, including interaction for significant effects apply an appropriate posthoc test) Tip: with the table(TootGrowth$dose, TootGrowth$supp)you can get an overview of the number of replicates. Opdracht 5.4 Fertilation2 You find in your data map the de map staat in de datafolder het bestand bemesting.xlsx. Het gaat over een bemestingsproef. De proef bestaat uit twee factoren: * wel/niet bemest * wel/niet toevoeging van Kalium/Magnesium/Calcium (afhankelijk van je dataset) Maak een script die de volgende zaken uitvoert: importeer de dataset maak een figuur die de data goed weergeeft (bedenk zelf hoe je zulke data mooi kan weergeven) Stel de hypotheses op voor mogelijke effecten (we houden GEEN rekening met mogelijke interacties) Voer een ANOVA uit "],["posthoctoets.html", "Hoofdstuk 6 Posthoctoets", " Hoofdstuk 6 Posthoctoets Met een ANOVA kan je testen of er wel/geen effect is van een verklarende variabele. Als er een significant effect is, de H0 wordt verworpen, dan weet je wel dat er ergens een verschil zit tussen de verschillende groepen van de verklarende variabele, maar nog niet welke groepen onderling van elkaar verschillen. Daarvoor is een posthoctoets ontwikkeld. Je voert een posthoctoets uit om te kijken welke groepen onderling significant van elkaar verschillen. Waarom niet gewoon een aantal t-toetsen uitvoeren (je vergelijkt immers telkens twee groepen onderling)? Twee redenen: Ten eerste omdat je op zoek gaat of en waar onderlinge verschillen zitten. En voor al die toetsen bij elkaar wil je de kans op een type-1-fout (ten onrechte H0 verwerpen) op 0,05 houden. Ten tweede omdat je dezelfde data gebruikt om verschillende toetsen uit te voeren. In de loop van de afgelopen eeuw zijn er heel wat verschillende posthoctoetsen ontwikkeld en is het moeilijk door de bomen het bos te zien. We gebruiken een aantal simpele stelregels: Alle groepen onderling vergelijken: Bij ongeveer gelijke groepsgroottes: Tukey HSD. Bij ongelijke groepsgrootte: Bonferroni. Alleen behandelingen ten opzichte van een controlegroep vergelijken: De Dunnet’s posthoctoets. Hoe voeren we die uit (als voorbeeld met de melkgiftdata, waarbij fit het resultaat is van de functie lm())? Er zijn binnen R veel manieren om posthoctoetsen uit te voeren. Wij gebruiken binnen deze cursus de package emmeans, omdat we met deze package alle mogelijke posthoctoetsen kunnen uitvoeren. Wel zo gemakkelijk. 6.0.1 Tukey HSD Als voorbeeld het effect van ras op melkgift: Tukey HSD doe je op de volgende manier: library(emmeans) emmeans(fit, specs = pairwise ~ ras) ## $emmeans ## ras emmean SE df lower.CL upper.CL ## HF 2.95 0.0459 9 2.85 3.06 ## MRY 3.21 0.0513 9 3.09 3.33 ## RHF 2.97 0.0592 9 2.83 3.10 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## HF - MRY -0.2580 0.0688 9 -3.748 0.0114 ## HF - RHF -0.0147 0.0749 9 -0.196 0.9791 ## MRY - RHF 0.2433 0.0784 9 3.105 0.0307 ## ## P value adjustment: tukey method for comparing a family of 3 estimates Het resultaat bestaat uit twee onderdelen: Het gemiddelde effect van iedere factor (officieel de estimated marginal means genoemd, weet je gelijk waar de naam van de package vandaan komt). Van ieder effect is ook de standaardfout en het betrouwbaarheidsinterval gegeven. Daaronder staan de contrasts. Dat zijn de onderlinge vergelijken. Het verschil wordt gegeven en er wordt een t-toets uitgevoerd waarbij de overschrijdingskans gecorrigeerd is. Standaard wordt de TukeyHSD-correctie gebruikt. De bovenste en onderste vergelijking zijn significant (p&lt;0.05). Dus MRY verschilt significant van HF en RHF, maar HF en RHF verschillen onderling niet significant van elkaar. 6.0.2 Bonferroni Willen we nu een Bonferroni-posthoc uitvoeren, dan hoeven maar een argument toe te voegen: emmeans(fit, specs = pairwise ~ ras, adjust = &quot;bonf&quot;) ## $emmeans ## ras emmean SE df lower.CL upper.CL ## HF 2.95 0.0459 9 2.85 3.06 ## MRY 3.21 0.0513 9 3.09 3.33 ## RHF 2.97 0.0592 9 2.83 3.10 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## HF - MRY -0.2580 0.0688 9 -3.748 0.0137 ## HF - RHF -0.0147 0.0749 9 -0.196 1.0000 ## MRY - RHF 0.2433 0.0784 9 3.105 0.0379 ## ## P value adjustment: bonferroni method for 3 tests Het bovenste deel blijft precies hetzelfd, maar je ziet (kleine) verschillen in de p-waarde. Deze test is iets conservatiever (voorzichtiger) dus de p-waardes zijn een fractie hoger. 6.0.3 Dunnet’s Voor de Dunnet’s Posthoctoets gebruiken we als specs niet de pairwise, maar trt.vs.ctrl (*treatment versus control): emmeans(fit, specs = trt.vs.ctrl ~ ras) ## $emmeans ## ras emmean SE df lower.CL upper.CL ## HF 2.95 0.0459 9 2.85 3.06 ## MRY 3.21 0.0513 9 3.09 3.33 ## RHF 2.97 0.0592 9 2.83 3.10 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## MRY - HF 0.2580 0.0688 9 3.748 0.0087 ## RHF - HF 0.0147 0.0749 9 0.196 0.9637 ## ## P value adjustment: dunnettx method for 2 tests De functie pakt automatisch de eerste factor (hier HF) als controle. Met het argument `ref`` kan je aangeven welke factor je als controle wilt. In onderstaand geval willen we de tweede factor als controle: emmeans(fit, specs = trt.vs.ctrl ~ ras, ref = 2) ## $emmeans ## ras emmean SE df lower.CL upper.CL ## HF 2.95 0.0459 9 2.85 3.06 ## MRY 3.21 0.0513 9 3.09 3.33 ## RHF 2.97 0.0592 9 2.83 3.10 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## HF - MRY -0.258 0.0688 9 -3.748 0.0087 ## RHF - MRY -0.243 0.0784 9 -3.105 0.0237 ## ## P value adjustment: dunnettx method for 2 tests Er is nog een variant voor als je de laatste factor als controle wilt. Dan moet je een k achter ctrl zetten: emmeans(fit, specs = trt.vs.ctrlk ~ ras) ## $emmeans ## ras emmean SE df lower.CL upper.CL ## HF 2.95 0.0459 9 2.85 3.06 ## MRY 3.21 0.0513 9 3.09 3.33 ## RHF 2.97 0.0592 9 2.83 3.10 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df t.ratio p.value ## HF - RHF -0.0147 0.0749 9 -0.196 0.9637 ## MRY - RHF 0.2433 0.0784 9 3.105 0.0237 ## ## P value adjustment: dunnettx method for 2 tests Opdracht 6.1 posthoctoets importeer de package emmeans (via install.packages(\"emmeans\")) Voer de juiste posthoctoets uit bij voorgaande opgave over silicium. "],["opgaven-hoofdstuk-15.html", "6.1 Opgaven hoofdstuk 15", " 6.1 Opgaven hoofdstuk 15 Opdracht 6.2 Gebruik uit onderstaande Practice Problems de datasets: 15.1, 15.4, 15.8 I.p.v. vragen uit het boek, met dezelfde dataset de volgende vragen beantwoorden: Data invoeren Scatterplot maken Hypotheses opstellen ANOVA uitvoeren, p-waarden opschrijven De juiste posthoc-toets uitvoeren Conclusies trekken "],["oefenen-met-lineaire-regressies.html", "Hoofdstuk 7 Oefenen met Lineaire regressies", " Hoofdstuk 7 Oefenen met Lineaire regressies Deze week ga je oefenen met de lineaire regressie aan de hand van een aantal datasets. Opdracht 7.1 Schapen Het wegen van levende schapen is in de praktijk een moeizame klus. Daarom onderzoekt men of via het meten van de borstomvang een goede indicatie te geven is voor het gewicht. Men heeft daartoe gegevens verzameld (schapen.xlsx). Importeer de data Maak een spreidingsdiagram Voer een lineaire regressie uit Voorspel het gewicht bij een borstomvang van 80 cm Opdracht 7.2 Fenolen Anne is een derdejaars studenten Toegepaste Biologie die voor haar stage een onderzoek doet naar de concentratie fenolen in de bodem. In een bepaald veengebied is een ammoniakbron aanwezig. Ze meet op verschillende afstanden van de ammoniakbron de concentratie fenolen in de bodem. De verzamelde data staat in bestand fenolen.xlsx. Importeer de data Maak een spreidingsdiagram Voer een lineaire regressie uit Voorspel fenolconcentratie op 75,3 meter afstand van een ammoniakbron. Opdracht 7.3 Melkproductie Van een aantal koeien heeft met gedurende een aantal weken na het afkalveren de gemiddelde melkrproductie in kg fcm per dag (fcm = fat corrected milk) bepaald. De koeien hebben een vergelijkbaar ras, leeftijd en voerrantsoen. De resultaten staan in melkproductie.xlsx Importeer de data Maak een spreidingsdiagram Zet de regressielijn in de figuur Voor regressieanalyse uit, en bepaal de R2. Zoek uit hoe je de R2 in de grafiek erbij kan zetten. "],["oefenen-met-statistische-toetsen.html", "Hoofdstuk 8 Oefenen met statistische toetsen?", " Hoofdstuk 8 Oefenen met statistische toetsen? nog uit te werken "],["aan-de-slag-met-eigen-data-van-bioxperience.html", "Hoofdstuk 9 aan de slag met eigen data van Bioxperience", " Hoofdstuk 9 aan de slag met eigen data van Bioxperience "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
