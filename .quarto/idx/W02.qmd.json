{"title":"Figures via ggplot","markdown":{"headingText":"Figures via ggplot","containsRefs":false,"markdown":"\nThe most common way to produce figures in R nowadays is using the package ggplot2.\nIt is part of the Tidyverse packages.\nIt is extremely versatile.\n\nIn this course we spend one lesson on ggplot to learn the basics.\nWe use the [online manual](https://ggplot2-book.org/index.html){target=\"_blank\"}.\n\n::: {#exr-ggplotmanual}\n\nManual\n\n* Read the **first steps** in the online manual\n\n:::\n\n\n## First steps\n\nGGplot is part of tidyverse, which includes all kind of tools to work with data, with some of them quite usefully when making figures.\nTherefore it is, in general, useful to make this tools available in your script.\n\n::: {#exr-tidyverse}\n\nTidyverse\n\n* Add to your script a line of code that will activate tidyverse and run the code. NB: it is good custom to place all the library-function in the first rows of your script.\n:::\n\n\n## Code for figures\n\nOn first sight, codes for ggplot-figures look unnecessarily complicated, but it is in fact quite structured.\n\nThe code works in a few steps:\n\n* First step is to define the figure, by giving the variables for the x and y-axis.\n\n`ggplot(data = df, aes(x = var1, y = var2)) +`\n\nNB: replace the names var1, var2 and df for the names you use for your data frame and column names. \n\nThe `+` is placed at the end of the row to indicate that the output of this row will be used in the next line of code.\nIn this way, you can build-up the code for the figure in a clear and structured way.\n\n\n* The second step is defining the type of figure, e.g.:\n\n`geom_histogram()`\n\nNB: for some figures you only need an x-variable, like for histogram or boxplot.\n\n\n::: {#exr-histogram}\n\nHistogram\n\n* Add code in your script to make a histogram of body temperature\n\n:::`\n\n\n\n## Types of figures\n\nWith ggplot there are many different types of figures possible. \nHave a look in the manual at the [geoms chapter](https://ggplot2-book.org/individual-geoms.html){target=\"blank\"}.\n\n::: {#exr-geomfunctions}\n\ngeom-functions\n\n* Find out which functions you need for a boxplot and for a scatterplot\n\n:::\n\n\n\n## aes\n\nThe functions `ggplot()`has **aes** as **argument** (input for the function).\nAes stand for aesthetics.\nNo idea why this word is chosen, since the argument is about which data is presented on which axis.\nYou probably noticed that `aes` is followed by `()`, which indicates that aes is a function on its own.\n\nIn `aes()` you can add additional arguments, e.g. to color or fill different groups (using `fill=vargroup` or `color=vargroup`, vargroup the name of column that defines the group).\n\n\n::: {#exr-aes}\n\naes\n\n* adjust your script in a way that the different genders (column gen) have a different fill.\n\n:::\n\n\n## position\n\nAs you probably noticed, is the result of a histogram with two groups that both histograms are stacked.\nBut it would give more insight if they are placed on the same level.\n\nYou can change that with the argument `position` in the geom-function: `position =  \"identity\"`.\n\nThe **value** identity means that both groups are positioned independently of each other on the y-axis.\nFor other possibilities see [manual](https://ggplot2-book.org/layers.html?q=position#position){targeg=\"blank\"}.\n\n\n::: {#exr-position}\n\nposition\n\n* Adjust the code, so that both histograms are not stacked anymore.\n  \n:::\n\n\n## transparancy\n\nNow both histograms are at the same height can we compare the numbers more easily.\nDrawback is that in some places one group is hidden behind the other and you don't see how much lower the other group is.\nThe solution is to make the bars slightly transparant.\nYou can do that with the argument (also in the geom-function)  `alpha = 0.4`. \nThe value 0.4 is oftern a good mix between brightness and transparency.\n\n\n::: {#exr-alpha}\n\nalpha\n\n* Add the argument alpha to your code and adjust the value to your preference.\n  \n:::\n\n\n## Densityplots\n\nA nice alternative for an histogram is a densityplot, via the function `geom_density`.\n\n::: {#exr-density}\n\ndensity\n\n* Copy the code for the histogram in your script.\n* Replace the word histogram with density and run the code.\n\n:::\n\nQuite simple, isn't it?\n\n\n## Scatter plots\n\nA common graph is the scatter plot.\nBoth x- and y-axis contain numerical (and often continuous) data.\n\nIn the `aes()` you need column names for both x and y.\nWith `geom_point` you display the data as points in the graph.\nAs in the histogram, you can give groups different colours, in the case of points, choose the argument `color` instead of `fill` in `aes()`.\n\n\n::: {#exr-scatterplot}\n\nScatterplot\n\n* Add in your script code for a scatterplot of tc on the x-axis verus hr (heart rate)\n* Give the different genders a different colour.\n\n:::\n\n\n## Bar chart\n\nA common way to present data like in the body temperature data set, is to use bar charts.\n\nBar charts give the average (and ofter spread in the form of error bars) of the data, which is nearly always divided in different groups (one bar for each group).\n\nThe most convinient ggplot-code for this kind of plots is `stat-summary()`.\nIn the function you can define the type of graph. \nFor a bar chart, use `geom = \"bar\"`.\nIt automatically calculates the mean and the standard error for each group.\n\n\n::: {#exr-barchart}\n\nBar chart\n\n* make in the same script new code to show the means of body temperature of men and women in separate bars. Tip: use `gen` as variable on the x-axis\n* run the code\n\n:::\n\nOften you want to include error bars in your bar chart.\nWith the ggplot it is quite easy: just add another layer with `stat_summary()`, but now with `geom = \"errorbar\"`.\nFor aesthetic reasons make the error bar smaller than the bar by adding the argument `width = 0.5`.\n\n\n::: {#exr-errorbars}\n\nError bar\n\n* Add an error bar to your plot\n\n:::\n\n\n\n## multiple groups with bar plots\n\nAlso by bar charts you can show different groups.\nIn this case use the argument `fill` as you want to fill up the bars.\n\nThe default setting for position in `stat_summary()` is \"identity:, but with bar charts it is normal to have the groups besides each other, that is called dodge. \nYou can control how close the groups are by: `position = position_dodge(0.9)`.\nA value of 0.9 is often optimal.\n\nNB: `position_dodge()` also works with other types of graphs like box plots and violin plots.\n\n\n## Trend line\n\nWhen you have a scatter plot, you are often interested in the relation between the variables on the x- and y-axis.\n\nYou probably know the function for a trend line in Excel, a similar function is available in ggplot.\nJust ad the line `geom_smooth(method = \"lm\")`.\nThe argument `lm` means that a linear fit is made.\n\n\n::: {#exr-trendline}\n\ntrend line\n\n* Go back to the script for the scatter plot\n* Add a trend line\n\n\n:::\n\n\nIf done right, you see now a straight line through the point cloud.\nAround the line is a grey area: the 95% condifence of the line (with 95% confidence the real linear relation is with that area).\nIf you want to remove that area, just add the argument `se = FALSE`.\n\n\n## Many more possibilities\n\nThere is a variety of possibilies to adjust your figures in ggplot. \nIn addition other people have developed packages that make other figures (including GIS-maps) with ggplot-functionality.\n\nBecause a clear figure is an excellent way to communicate research results, it is clever to invest some time learning more about ggplot.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"W02.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.36","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}}}