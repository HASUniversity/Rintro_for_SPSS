{"title":"Start with RStudio","markdown":{"headingText":"Start with RStudio","containsRefs":false,"markdown":"\nRStudio is free software and available for Windows, macOS and Linux.\n\nR is a computer language, developed in New Zealand, in 1995, maintained by the R Core Team.\nIn make life easier an an **Integrated Development Environment** (*IDE*) is developed: RStudio.\nWith the combination of R and RStudio you can easily handle data, make analyses and create figures.\n\n\n## Installing\n\nYou need to install both R and RStudio.\nYou can find the links [here](https://posit.co/download/rstudio-desktop/){target=\"_blank\"} vinden.\n\n::: {#exr-install}\n\nInstall the software\n\n* Click on the link above\n* Follow the first step to install R. Click on *install for the first time*. Always choose *yes* and *OK*.\n* Go back to the first website and follow step 2. Choose the most recent free stand alone version of RStudio.\n* Open RStudio\n\n:::\n\n\n## Console\n\nWhen you have opened RStudio, you see at the left bottom the **console**.\nThis is the place where you give the computer R commands.\nThe term originates from the time that computers were the size of a (modern) fridge, and giving commands via a separate keyboard and screen (often incorporated in a desk): the console.\nNowadays everything is integrated in a laptop, and the commands are often hidden behind icons.\n\n\nAt the bottem you see `>`.\nThat is the *prompt*, right after you can type commands.\n\nMost of you are not familiar with communicating with computers via language, so it is important to practice it a bit.\n\n\n::: {#exr-commands}\n\nCalculation excercise\n\n* Give R some calculation commands, e.g. `4*2`. Don't put a = for or after the command. End your command with *enter*.\n* try also square roots (`sqrt()`), the power (`3^2`), pi (`pi`).\n\n:::\n\n \n## Objects\n\nOften you want to use the outcome of a calculation in the next step.\nYou can put the outcome in the computer memory by giving it a name:\n\n```{r, eval=FALSE}\noutcome <- 4*2\n```\n\nof\n\n```{r, eval=FALSE}\n4*2 -> outcome\n```\n\nThe arrow (`<-`) means that the name (the *object*) where it points to, get the value which is at the other end of the arrow.\n\nMost often the left pointing arrow is used (`<-`), which you can write instantly with surrounding spaces with the short-cut `alt-`.\nObjects always need to start with a letter and should not contain any spaces.\n\nBy just writing the object name in the console you can call the value of that object.\nAnd good to know that R distuinguished normal and capital letters.\n\n::: {.callout-tip}\n\nuse object names that make sense,  you will recognize the purpose the day after.\n\n:::\n\n\n::: {#exr-objects}\n\nObjects\n\n* make objects for your name, place of residence, age and favorite number. NB:you need to start and end a text string with `\"` to make clear it is a valua and not an object name. For numbers, don't use `\"`! \n* call one-by-one the different objects\n* let R sum up your age and favorite number (Nb: use the object names!)\n* Try also sum up name and place of residence. You will get an error. Read it carefully and try to understand the meaning of the error\n\n:::\n\n\n## Vectors {#Vectors}\n\nObjects can be combined in a *vector*, with the function `c()`(c stands for *combine*).\n\n```{r, eval=FALSE}\np1 <- c(naam, woonplaats, leeftijd)\n```\n\nThe vector is an object on its own, containing multiple *values* from the other objects.\nIn this case we have named this vector *p1*, but you can choose a different name if you like.\nVectors are widely used in R, especially in statistical functions.\n\nYou can call the values seperately by using an *index number* after the object name: e.g. `p1[2]`.\nWithin the square brackets `[]` you give the item number in the vector.\nThe first item has index number 1.\n\nYou also can give multiple index numbers, using the function `c()`: e.g. `p1[c(1,3)]`, or using the minus sign to exclude one or more: e.g. `p1[-2]`.\n\n::: {#exr-indexnumbers}\n\nIndex numbers\n\n* make a vectore with the range 1 to 10 (easily made in R with the code `1:10`). Give it an object name.\n* Practice with calling different numbers from the range using index numbers.\n* Call the complete vector, except the last value.\n* Find a clever way to call at once index numbers 3-7.\n\n:::\n\n\nIf vectors only contain numbers, you can make calculations with the complete vector.\n\n::: {#exr-vectors}\n\nVectors\n\n\n* Create a vector with the rang 1-4\n* Multiple the vector by 2. What happens?\n* Try also different calculations.\n* What happens if you multiply the vector by itself?\n  \n:::\n  \n\n## Functies\n\nFunctions are the foundation of R (and every other computer language).\nThey are in essence small factories changing input to output.\nThe output can be a number, but also a grpah or even the creation of a file.\n\nFor illustration purposes the function `mean()`:\n\n```{r, eval=FALSE}\nmean(v)\n```\n\nHiermee geef je R de opdracht het gemiddelde te berekenen van de getallen in vector v.\n\n::: {#exr-functions}\n\nFunctions\n\n* calculate the mean of the vector from last excercise.\n* Apply also the next functions:\n    * length()\n    * sd()\n    * min()\n    * max()\n    * range()\n    * summary()\n* Find out what these functions do. Tip: you can use `?functionname` to open a help page.\n\n:::\n\nThe input in a function is called an **argument**.\nMany functions can have multiple arguments. \nSome of them are required, otherwise you get an error.\nOther arguments are not required, and have standard values.\nYou only need to add them, if you want to have another values for those arguments.\nIn the next lesson, about t-tests, you will find both types of arguments.\n\nNB: all arguments have names. It is a good custom to name them in your functions (e.g. `mean(x=p1)`), otherwise R will assume the order of arguments based on how the function is programmed.\nYou find the argument named with the helper pages using `?`.\n\n\n## Packages {#packages}\n\nR has a great number of base functions available, but people have developed many more functions.\nThese functions are available in so called *packages*. \nPackages are  bundles of functions, often developed for specific purposes (e.g. making nice graphs).\nThese packages are tested and available from a save location (CRAN-website).\nYou can install them with the function `install.packages()`.\nAs argument you give the package name. NB: it is text, so you need `\"`.\n\nYou only need to install it once on your computer.\nIt is like buying a book (but then for free!) and store it in your bookshelf.\n\nFor this course we use many functions out of a collection of packages called **tidyverser**.\nWe also use the package **readxl** to import Excel files.\n\n::: {#exr-packages}\n\nInstall packages\n\n* Install the packages tidyverse and readxl. NB: installing tidyverse takes time, wait until you see the cursor again.\n\n:::\n\nPlacing a book in the bookshelf, does not mean you can read it.\nIn order to use a function from a package you need to activate with the function `library()`.\nThe reason is that some packages contain functions with the same name. \nIt is saver to only activate packages you need.\n\n\n\n## R-project\n\nThe power of RStudio is the way you can organise data analysis in projects.\nBy linking a project environment to a map on your computer, you can store the history of your data analysis for that specific map and RStudio use that map as the default to search and store files (replacing the old R-code `setwd()` to define the working directory).\nYou can start a project in an existing folder, or make a new map (RStudio uses the old name directory for a map).\n\nFor this course, I already created a map in Teams which you need to synchronise with your computer in order to work with.\n\nYou can open the project from within RStudio: **File** -> **Open project**, or next time by double clicking on the R-project file in your map. \nThen it will automatically open RStudio in your project mode.\n\n\n## Script {#script}\n\nNice that you can communicate with the computer via de console, but how do you remember what you did last week?\nThe solution is to write your codes in a text document and execute the codes from there.\nSuch a text document is called a **script**.\nIf you save your script in your project map, you only need to open it to see what you did last time.\n\nYou can open a new script by either clicking on the plus sign in the menu, or use the short-cut **ctr**+**shift**+**n**. \n\n::: {#exr-script}\n\nSetup script\n\n* type in the first row the next code `library(readxl)`.\n* in th next row type `temp <- read_excel(\"data/lichaamstemperatuur.xlsx\")\n* Save the script as *Bodytemp.R* in je R-folder.\n\n:::\n\nWith the short-cut **Ctrl**+**Enter** you can run the row where your cursor is. \nIt automatically goes to the next row, so you can by repeatly using the short-cut run all codes in your script.\nYou can also select all or part of the code and run it at once with the same short-cut.\n\n\n::: {#exr-runecode}\n\nRun code\n\n* execute the codes from your script row by row\n* Observe what it is doing\n\n:::\n\nTo make your codes more clear, you can add comments.\nText starting with # will be recognized as comments, and not executed.\nIt is a good habit to add comments in your scripts, so other people can understand what you were doing.\n\n\n::: {#exr-comments}\n\nComments\n\n* Include above both rows of code in the scrip an extra row describing the code below as a comment\n\n:::\n\n\n## Data frame\n\n\nBy running both rows of code, if correct you see on the right top side the object bodytemp.\nThe object is the data from the Excel file, and is called a **data frame**.\n\n::: {#exr-dataframe}\nData frame\n\n* add the next code to your script: `str(bodetemp)`, and run that code. \n:::\n\n*Str* stands for structure and with this function you can see the  intern structure of the objec\n\nYou get the following output:\n\n```{R echo=FALSE, warning = FALSE, message = FALSE}\nlibrary(readxl)\nbodytemp <- read_excel(\"../data/lichaamstemperatuur.xlsx\")\nstr(bodytemp)\n```\n\nThe top row shows the type of object.\nIn this case it has three labels: *tbl_df*, *tbl* en *data.frame*.\nSounds complicated, but all three say that it is a ** data frame**.\n\nEvery column is in fact a vector.\nThey are listed after the **$**.\nThe type of data in each vector is given (**num** = numeric, **chr** = character (= text)).\nBetween the brackets ([]) you can find how long the vectors are.\n\nThere are several ways to look at your data frame:\n\n* Via the object name (`bodytemp`)\n* With the function `View()`\n* In the right top window, by clicking on the object name\n\n\n::: {#exr-view}\n\nView your Data frame\n\n* Try the three ways to view your data frame\n\n:::\n\nOften, you only need certain vectors (columns) from your data frame.\nYou can call these vectors seperately by using the sign **\\$** after the object name of the data frame. \nIn case of the bodytemp data set: `bodytemp$tc` will show you the vector tc.\n\n\n::: {#exr-vector}\n\ncall vector from data frame\n\n* Write a code that will calculate the average of the vector tc.\n\n:::\n\n\n::: {#exr-owndataset}\n\nOwn data set\n\n* Use, or make an Excel file of a own data set (e.g. from your internship)\n* Start a new script and write code that will import that data\n* View your data in RStudio\n\n:::\n\n\n\n## Summary part 1\n\nYou now have the basic skills of working in RStudio.\n\n* You can use R commands to make calculations\n* You can work with RSTudio projects and scripts\n* You know what data frames and vectors are, and make calculations with them\n* You can import data from Excel files\n\nIn the next chapter you use these skills to apply statistics.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"W01.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.36","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}}}